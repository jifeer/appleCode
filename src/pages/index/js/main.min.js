import echarts from "echarts"

export const libMain = function (t) {
  function r(e) {
    if (a[e]) return a[e].exports;
    var n = a[e] = {exports: {}, id: e, loaded: !1};
    return t[e].call(n.exports, n, n.exports, r), n.loaded = !0, n.exports
  }

  var a = {};
  return r.m = t, r.c = a, r.p = "", r(0)
}([function (t, r, a) {
  r.CreateWaterChart = a(1), r.TickVals = a(2)
}, function (t, r) {
  function a() {
  }

  a.prototype = {
    init: function (t) {
      var r = $("<div></div");
      $("." + t.dom).append(r), r.css({
        width: t.width + "px",
        height: t.height + "px",
        position: "relative"
      }), $("." + t.dom).css({position: "absolute"});
      var a = echarts.init(r[0]), e = $('<div class="chart_txt"></div>'), n = $('<div class="unitBox"></div>');
      e.append(n), r.append(e);
      var o = $("<div></div>"), i = $("<span>万元/个</span>"), s = $("<p>" + t.name + "</p>"), l = t.date ? t.date : "";
      if ("五年均价" == t.name) {
        s.css("margin-top", "95px");
        var p = $("<p>" + l + "</p>");
        p.css("marginTop", "-8px"), $("." + t.dom).css({top: "128px", left: "255px"}), i.css({
          top: "50px",
          left: "53px"
        }), o.css({fontSize: "43px"}), n.css({top: "36px"})
      } else "十年均价" == t.name ? (s.css({marginTop: "60px"}), $("." + t.dom).css({
        top: "146px",
        left: "103px"
      }), o.css({fontSize: "32px"})) : "年均价" == t.name && (s.css({marginTop: "60px"}), $("." + t.dom).css({
        top: "146px",
        left: "427px"
      }), o.css({fontSize: "32px"}));
      n.append(o), n.append(i), e.append(s), e.append(p), o.html(t.seriesData);
      var d = {
        series: [{
          type: "liquidFill",
          data: [.8 * t.seriesData / t.valBigData],
          center: ["50%", "50%"],
          waveLength: "60%",
          amplitude: 8,
          radius: "98%",
          label: {
            normal: {
              formatter: function (t) {
                return ""
              }
            }
          },
          outline: {itemStyle: {borderColor: "#0498dc", borderWidth: 3}, borderDistance: 0},
          itemStyle: {
            normal: {
              color: {
                type: "linear",
                x: 0,
                y: 0,
                x2: 0,
                y2: 1,
                colorStops: [{offset: 0, color: "#00cef6"}, {offset: 1, color: "#0074e0"}],
                globalCoord: !1
              }
            }
          },
          backgroundStyle: {color: "#002e96"},
          shape: ""
        }]
      };
      a.setOption(d)
        return a
    }
  }, t.exports = a
}, function (t, r) {
  function a() {
  }

  a.prototype = {
    init: function (t) {
      function r(t, r, a) {
        var e = M.append("defs"),
          n = e.append("linearGradient").attr("id", "linearColor" + a).attr("x1", "0%").attr("y1", "0%").attr("x2", "100%").attr("y2", "0%");
        n.append("stop").attr("offset", "0%").style("stop-color", t.toString()), n.append("stop").attr("offset", "100%").style("stop-color", r.toString())
      }

      function a(t, r, a, n, o, i, s, l) {
        var p, d = G.selectAll("path");
        d.transition().duration(r).attrTween("transform", function () {
          var r = t;
          t > n ? r = n + .02 * o : t < a && (r = a - .02 * o);
          var d = e(r, i) - 90, c = p || d;
          return p = d, function (t) {
            var r = c + (d - c) * t;
            return " rotate(" + r + ", " + l + ", " + s + ")"
          }
        })
      }

      function e(t, r) {
        return t / R * 220 - (m / R * 220 + 20)
      }

      function n(t, r) {
        return e(t, r) * Math.PI / 180
      }

      function o(t, r, a) {
        return {x: P - j * a * Math.cos(n(t, r)), y: D - j * a * Math.sin(n(t, r))}
      }

      function i(t, r) {
        var a = R / 13, e = o(t, r, .85), n = o(t - a, r, .12), i = o(t + a, r, .12), s = t - R * (1 / (220 / 360)) / 2,
          l = o(s, r, .28), p = o(s - a, r, .12), d = o(s + a, r, .12);
        return [e, n, d, l, p, i, e]
      }

      var s = t.domId, l = t.width, p = t.height, d = t.val, c = t.pathx || 65, u = t.pathy || 68, f = t.pointx || 0,
        x = t.pointy || 0, m = t.min, v = t.max, g = t.section1, h = t.section2, y = t.innerRadius || 28,
        C = d3.select("#" + s).append("svg:svg").attr("width", "100%").attr("height", "100%").attr("preserveAspectRatio", "xMidYMid meet"),
        b = d3.svg.arc().innerRadius(l / 2 - y).outerRadius(l / 2), $ = -(Math.PI / 2 + Math.PI / 9),
        k = Math.PI / 2 + Math.PI / 9, S = $ + g / (v - m) * (k - $), z = $ + h / (v - m) * (k - $),
        A = [{id: 0, startAngle: $, endAngle: S, endColor: "#d76316", startColor: "#ce7d0a"}, {
          id: 1,
          startAngle: S,
          endAngle: z,
          endColor: "#01ce4d",
          startColor: "#88e33e"
        }, {id: 2, startAngle: z, endAngle: k, endColor: "#ffe364", startColor: "#e19201"}],
        M = C.append("g").attr("transform", "translate(" + c + "," + u + ")"),
        T = (M.selectAll("path").data(A).enter().append("path").attr("d", function (t) {
          return b(t)
        }).attr("fill", function (t, a) {
          return 0 == t.id ? (r(t.startColor, t.endColor, a), "url(#linearColor0)") : 1 == t.id ? (r(t.startColor, t.endColor, a), "url(#linearColor1)") : 2 == t.id ? (r(t.startColor, t.endColor, a), "url(#linearColor2)") : void 0
        }), C.append("g").attr("transform", "translate(0,0)")),
        w = (T.append("circle").attr("r", .05 * (l / 2)).attr("cx", l / 2).attr("cy", p / 2).attr("fill", "#ffbf00"), {
          size: l,
          min: m,
          max: v,
          majorTicks: 8,
          minorTicks: 4,
          duration: 500,
          value: d
        }), I = w.value, P = (w.size, w.size / 2), D = w.size / 2, v = w.max, m = w.min, R = w.max - w.min,
        j = .97 * w.size / 2, B = (w.minorTicks, w.majorTicks, w.duration), W = (m + v) / 2, q = i(W, w),
        F = d3.svg.line().x(function (t) {
          return t.x
        }).y(function (t) {
          return t.y
        }).interpolate("basis"),
        G = C.append("svg:g").attr("class", "pointerContainer").attr("transform", "translate(" + f + "," + x + ")");
      G.selectAll("path").data([q]).enter().append("svg:path").attr("d", F).style("fill", "#b77129").style("stroke", "#ac8a65").style("fill-opacity", .7);
      var L = iopctrl.arcslider().radius(l / 2), O = 0;
      O = v - m >= 5 ? 8 : 6.5, L.axis().orient("in").normalize(!1).ticks(O).tickSubdivide(4).tickSize(10, 8, 10).tickPadding(1).scale(d3.scale.linear().domain([m, v]).range([$, k])), C.append("g").attr("class", "gauge").attr("transform", "translate(-50,-48)").call(L), a(I, B, m, v, R, w, D, P)
    }
  }, t.exports = a
}]);
